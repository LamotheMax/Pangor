package ca.ubc.ece.salt.sdjsb.checker;

import java.util.LinkedList;
import java.util.List;

import org.mozilla.javascript.ast.AstNode;

import ca.ubc.ece.salt.sdjsb.checker.alert.Alert;

/**
 * Provides an interface for tools to statically analyze source changes.
 * 
 * This class handles events raised by a linear inspection of the statements
 * in the abstract syntax tree.
 * 
 * AbstractChecker does not currently use a full event bus, but this could be an
 * option in the future if individual checkers only need to listen for certain
 * events.
 * 
 * @author qhanam
 */
public abstract class AbstractChecker {
	
	/**
	 * Stores the repair alerts generated by the checker.
	 */
	private List<Alert> alerts;
	
	/**
	 * Provides a link for checkers to access the CheckerRegistry. The
	 * CheckerRegistry provides services for the checkers like AstNode to Tree
	 * node mapping.
	 */
	protected CheckerContext context;
	
	/**
	 * Create a new AbstractChecker.
	 */
	public AbstractChecker(CheckerContext context) {
		this.alerts = new LinkedList<Alert>();
		this.context = context;
	}
	
	/**
	 * Gets the alerts generated by the checker.
	 * @return The list of alerts generated.
	 */
	public List<Alert> getAlerts() {
		return alerts;
	}

	/**
	 * Handles the case where a statement is encountered in the source AST that
	 * is not present in the destination AST (it was deleted).
	 * @param node The Rhino AstNode that was deleted.
	 */
	public abstract void sourceDelete(AstNode node);
	
	/** 
	 * Handles the case where a statement is encountered in the source AST that
	 * is updated (modified) in the destination AST.
	 * 
	 * TODO: What kind of modifications trigger an update? Text modifications?
	 * 
	 * @param node The Rhino AstNode that was updated.
	 */
	public abstract void sourceUpdate(AstNode node);
	
	/** 
	 * Handles the case where a statement is encountered in the source AST that
	 * has a new location in the destination AST.
	 * @param node The Rhino AstNode that was moved.
	 */
	public abstract void sourceMove(AstNode node);

	/** 
	 * Handles the case where a statement is encountered in the destination AST
	 * that is updated (modified) from the source.
	 * @param node The Rhino AstNode that was updated.
	 */
	public abstract void destinationUpdate(AstNode node);

	/** Handles the case where a statement is encountered in the destination AST
	 * that has a new location from the source.
	 * @param node The Rhino AstNode that was moved.
	 */
	public abstract void destinationMove(AstNode node);
	
	/**
	 * Handles the case where a statement is encountered in the destination AST
	 * that is not present in the source AST (it was inserted).
	 * @param node The Rhino AstNode that was inserted.
	 */
	public abstract void destinationInsert(AstNode node);
	
	/**
	 * Handles the event where we are finished iterating through the AST. If
	 * the checker is not flow sensitive, alerts should be generated here.
	 */
	public abstract void finished();
	
	/**
	 * Each checker detects one type of repair.
	 * @return The repair type.
	 */
	public abstract String getCheckerType();
	
	/**
	 * Registers an alert to be reported to the user.
	 * @param alert
	 */
	protected void registerAlert(Alert alert) {
		this.alerts.add(alert);
	}
	
}
